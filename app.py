import streamlit as st
import pandas as pd
from google_utils import GoogleSheetsManager  # –ò–∑–º–µ–Ω–µ–Ω–Ω—ã–π –∏–º–ø–æ—Ä—Ç
from scheduler import generate_schedule, build_schedule_table, count_shifts
from storage import load_shifts, save_shifts
from utils import save_schedule_image

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ Google Sheets
gs_manager = GoogleSheetsManager()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="–ì—Ä–∞—Ñ–∏–∫ —Å–º–µ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤", layout="wide")
st.title("üìÖ –ì—Ä–∞—Ñ–∏–∫ —Å–º–µ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
with st.sidebar:
    st.header("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ")
    if st.button("üßπ –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å —Ñ–æ—Ä–º—ã"):
        if gs_manager.clear_responses():
            st.success("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã! –ù–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è —Å 2-–π —Å—Ç—Ä–æ–∫–∏.")
            st.rerun()  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
        else:
            st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")

    st.markdown("---")
    st.info("""
    **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:**
    1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–º–µ–Ω
    2. –ù–∞–∂–º–∏—Ç–µ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"
    3. –ù–∞–∂–º–∏—Ç–µ "–°–æ—Å—Ç–∞–≤–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫"
    """)

# –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
def main():
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä
        data = gs_manager.get_clean_data()
        df = pd.DataFrame(data)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –§–ò–û
        if df["–§–ò–û"].duplicated().any():
            st.warning("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –¥—É–±–ª–∏–∫–∞—Ç—ã –§–ò–û. –î–æ–±–∞–≤–ª—è–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã...")
            df["–§–ò–û"] = df["–§–ò–û"].apply(lambda x: f"{x}_{pd.util.hash_pandas_object([x])[0]}")

        shifts = load_shifts()

        # –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–º–µ–Ω
        st.subheader("üõ† –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–º–µ–Ω")
        updated = {}
        cols = st.columns(4)

        days_order = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
        for idx, day in enumerate(days_order):
            with cols[idx % 4]:
                updated[day] = st.number_input(
                    day,
                    min_value=0,
                    max_value=50,
                    value=shifts.get(day, 0),
                    step=1
                )

        if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–º–µ–Ω"):
            save_shifts(updated)
            st.success("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")

        if st.button("üìã –°–æ—Å—Ç–∞–≤–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫"):
            if df.empty:
                st.error("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞")
                return

            try:
                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
                schedule, unfilled_days = generate_schedule(df, updated)
                availability = {row["–§–ò–û"]: row["–î–Ω–∏"] for _, row in df.iterrows()}

                # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
                table = build_schedule_table(schedule, df["–§–ò–û"].tolist(), availability)

                # –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è
                def highlight(val):
                    if val == "‚úÖ":
                        return "background-color: #c8e6c9; color: black; font-weight: bold"
                    elif val == "‚ùå":
                        return "background-color: #ffcdd2; color: black; font-weight: bold"
                    return ""

                # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                if unfilled_days:
                    st.warning("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ —Å–º–µ–Ω—ã:")
                    for day, missing in unfilled_days:
                        st.markdown(f"- **{day}**: –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç {missing} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")

                st.dataframe(table.style.applymap(highlight), use_container_width=True)

                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                save_schedule_image(table, "schedule.png")
                st.image("schedule.png", use_container_width=True)

                with open("schedule.png", "rb") as f:
                    st.download_button(
                        "üì• –°–∫–∞—á–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫",
                        f,
                        file_name="–ì—Ä–∞—Ñ–∏–∫_—Å–º–µ–Ω.png",
                        mime="image/png"
                    )

                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–º–µ–Ω–∞–º
                shifts_count = count_shifts(schedule)
                stats = []
                for name in df["–§–ò–û"]:
                    requested_days = df[df["–§–ò–û"] == name]["–î–Ω–∏"].values[0]
                    total_requested = len(requested_days)
                    assigned = shifts_count.get(name, 0)
                    missed = total_requested - assigned
                    stats.append({
                        "–°–æ—Ç—Ä—É–¥–Ω–∏–∫": name,
                        "–ó–∞–ø—Ä–æ—à–µ–Ω–æ —Å–º–µ–Ω": total_requested,
                        "–ù–∞–∑–Ω–∞—á–µ–Ω–æ —Å–º–µ–Ω": assigned,
                        "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ": missed,
                    })

                st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º")
                st.dataframe(
                    pd.DataFrame(stats).sort_values("–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ", ascending=False),
                    use_container_width=True
                )

            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞: {str(e)}")


    except Exception as e:

        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")

if __name__ == "__main__":
    main()