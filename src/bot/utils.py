import os
import pandas as pd
from telegram.ext import ContextTypes

from src.core.google_utils import GoogleSheetsManager
from src.core.scheduler import generate_schedule, build_schedule_table
from src.core.storage import load_shifts, save_schedule
from src.utils.utils import save_schedule_image
import logging

gs_manager = GoogleSheetsManager()
logger = logging.getLogger(__name__)

async def auto_send_schedule(context: ContextTypes.DEFAULT_TYPE):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–¥–∏–Ω —Ä–∞–∑
        data = gs_manager.get_clean_data()
        if not data:
            raise ValueError("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞")

        if not gs_manager.remove_duplicates():
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã")

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
        data = gs_manager.get_clean_data()

        df = pd.DataFrame(data)
        shifts = load_shifts()
        schedule_data, unfilled = generate_schedule(df, shifts)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        save_schedule(schedule_data)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É
        table = build_schedule_table(
            schedule_data,
            df["–§–ò–û"].tolist(),
            {row["–§–ò–û"]: row["–î–Ω–∏"] for row in data}
        )

        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º
        temp_filename = "temp_schedule_shared.png"
        save_schedule_image(table, temp_filename)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å
        caption = "üìÖ –ê–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–º–µ–Ω\n‚úÖ - —Ä–∞–±–æ—Ç–∞–µ—Ç–µ\n‚ùå - –º–æ–≥–ª–∏ –±—ã —Ä–∞–±–æ—Ç–∞—Ç—å\n\n"
        if unfilled:
            caption += "‚ö† –ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã —Å–º–µ–Ω—ã:\n" + "\n".join(f"- {day}: {count}" for day, count in unfilled)

        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –æ–¥–∏–Ω —Ä–∞–∑ –≤ –ø–∞–º—è—Ç—å
        with open(temp_filename, "rb") as photo:
            photo_data = photo.read()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        for chat_id in context.bot_data['user_manager'].get_approved_users():
            try:
                await context.bot.send_photo(
                    chat_id=chat_id,
                    photo=photo_data,
                    caption=caption
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {chat_id}: {e}")

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.unlink(temp_filename)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")

async def send_saved_schedule(chat_id, context, schedule_data):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –±–µ–∑ –ø–µ—Ä–µ—Å—á—ë—Ç–∞
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets —Ç–æ–ª—å–∫–æ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–Ω—è—Ö
        data = gs_manager.get_clean_data()
        df = pd.DataFrame(data) if data else pd.DataFrame()

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É
        table = build_schedule_table(
            schedule_data,
            df["–§–ò–û"].tolist() if not df.empty else [],
            {row["–§–ò–û"]: row["–î–Ω–∏"] for row in data} if data else {}
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        temp_filename = f"temp_schedule_{chat_id}.png"
        save_schedule_image(table, temp_filename)

        caption = "üìÖ –¢–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–º–µ–Ω\n‚úÖ - —Ä–∞–±–æ—Ç–∞–µ—Ç–µ\n‚ùå - –º–æ–≥–ª–∏ –±—ã —Ä–∞–±–æ—Ç–∞—Ç—å"

        with open(temp_filename, "rb") as photo:
            await context.bot.send_photo(
                chat_id=chat_id,
                photo=photo,
                caption=caption
            )

        os.unlink(temp_filename)

    except Exception as e:
        error_msg = str(e) if str(e) else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è {chat_id}: {error_msg}")
        await context.bot.send_message(
            chat_id=chat_id,
            text=f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ: {error_msg}"
        )