from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ContextTypes
)
import logging
from src.bot.utils import send_saved_schedule
from src.core.google_utils import GoogleSheetsManager
from src.core.storage import load_shifts, save_shifts, load_schedule, remove_exchange_offer, save_exchange_offer, \
    find_exchange_offer, save_schedule

logger = logging.getLogger(__name__)
gs_manager = GoogleSheetsManager()

HELP_TEXT = """
 ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n
    /start ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é\n
    /help ‚Äî –ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º\n
    /set_fio <–§–ò–û> ‚Äî –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–∞—à–µ –§–ò–û\n
"""

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /help. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏.
    """
    await update.message.reply_text(HELP_TEXT)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /schedule
async def show_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ (–±–µ–∑ –ø–µ—Ä–µ—Å—á—ë—Ç–∞)
    """
    try:
        user_manager = context.bot_data['user_manager']
        chat_id = update.effective_chat.id

        if not user_manager.is_approved(chat_id):
            await update.message.reply_text("‚õî –í—ã –Ω–µ –æ–¥–æ–±—Ä–µ–Ω—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
            return

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        schedule = load_schedule()
        if not schedule:
            await update.message.reply_text("‚ÑπÔ∏è –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –µ—â—ë –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        await send_saved_schedule(chat_id, context, schedule)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")

async def add_slots(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ—Ç–æ–≤ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞"""
    try:
        user_manager = context.bot_data['user_manager']
        chat_id = update.effective_chat.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–¥–æ–±—Ä–µ–Ω
        if not user_manager.is_approved(chat_id):
            await update.message.reply_text("‚õî –í—ã –Ω–µ –æ–¥–æ–±—Ä–µ–Ω—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
            return

        if update.callback_query:
            query = update.callback_query
            try:
                # –†–∞–∑–±–∏—Ä–∞–µ–º callback_data (—Ñ–æ—Ä–º–∞—Ç "user_day_0", "user_day_1" –∏ —Ç.–¥.)
                parts = query.data.split('_')
                if len(parts) != 3 or parts[0] != 'user' or parts[1] != 'day':
                    logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data: {query.data}")
                    return

                day_idx = int(parts[2])  # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –¥–Ω—è –∏–∑ —Ç—Ä–µ—Ç—å–µ–π —á–∞—Å—Ç–∏
                shifts = load_shifts()
                days = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]

                if day_idx < 0 or day_idx >= len(days):
                    logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–Ω—è: {day_idx}")
                    return

                day = days[day_idx]
                shifts[day] += 1
                save_shifts(shifts)
                await query.edit_message_text(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Å–ª–æ—Ç –¥–ª—è {day}. –¢–µ–ø–µ—Ä—å: {shifts[day]}")

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ add_slots: {e}")
                await query.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –¥–Ω—è
            days = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
            keyboard = [[InlineKeyboardButton(day, callback_data=f"user_day_{i}")] for i, day in enumerate(days)]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ—Ç–∞:", reply_markup=reply_markup)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ add_slots: {e}")
        if update.callback_query:
            await update.callback_query.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        else:
            await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")

async def set_fio(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –§–ò–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π:
    - –ï—Å–ª–∏ –§–ò–û —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ - –∑–∞–ø—Ä–µ—â–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ
    - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –§–ò–û –Ω–µ –∑–∞–Ω—è—Ç–æ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    """
    try:
        user_manager = context.bot_data['user_manager']
        chat_id = update.effective_chat.id

        if not context.args:
            await update.message.reply_text("‚ÑπÔ∏è –£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –§–ò–û: /set_fio <–í–∞—à–µ –§–ò–û>")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_info = user_manager.get_user_info(chat_id)
        if not user_info:
            await update.message.reply_text("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–≤–µ–¥–∏—Ç–µ /start")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –§–ò–û
        if user_info.get('fio'):
            await update.message.reply_text("‚õî –ò–∑–º–µ–Ω–µ–Ω–∏–µ –§–ò–û –∑–∞–ø—Ä–µ—â–µ–Ω–æ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return

        fio = ' '.join(context.args).strip()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –§–ò–û –Ω–µ –ø—É—Å—Ç–æ–µ
        if not fio:
            await update.message.reply_text("‚ö†Ô∏è –§–ò–û –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –§–ò–û –Ω–µ –∑–∞–Ω—è—Ç–æ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        existing_user = user_manager.get_user_by_fio(fio)
        if existing_user and existing_user['chat_id'] != chat_id:
            await update.message.reply_text("‚ö†Ô∏è –≠—Ç–æ –§–ò–û —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º –§–ò–û
        if user_manager.update_user_fio(chat_id, fio):
            await update.message.reply_text(f"‚úÖ –í–∞—à–µ –§–ò–û —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {fio}")
        else:
            await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –§–ò–û. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ set_fio: {e}", exc_info=True)
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –§–ò–û")

# –î–æ–±–∞–≤–∏–º –≤ handlers.py
async def start_shift_exchange(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ–±–º–µ–Ω–∞ —Å–º–µ–Ω–∞–º–∏
    """
    try:
        user_manager = context.bot_data['user_manager']
        chat_id = update.effective_chat.id

        if not user_manager.is_approved(chat_id):
            await update.message.reply_text("‚õî –í—ã –Ω–µ –æ–¥–æ–±—Ä–µ–Ω—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        schedule = load_schedule()
        user_info = user_manager.get_user_info(chat_id)
        user_fio = user_info.get('fio')

        if not user_fio:
            await update.message.reply_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤–∞—à–µ –§–ò–û —Å –ø–æ–º–æ—â—å—é /set_fio")
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–Ω–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –æ—Ç–¥–∞—Ç—å (–≥–¥–µ –æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç)
        user_days = []
        for day, names in schedule.items():
            if user_fio in names:
                user_days.append(day)

        if not user_days:
            await update.message.reply_text("‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç —Å–º–µ–Ω –¥–ª—è –æ–±–º–µ–Ω–∞")
            return

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–Ω—è
        keyboard = [[InlineKeyboardButton(day, callback_data=f"exchange_day_{day}")] for day in user_days]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ—Ç–¥–∞—Ç—å:",
            reply_markup=reply_markup
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_shift_exchange: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –æ–±–º–µ–Ω–∞")

async def handle_exchange_day_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–Ω—è –¥–ª—è –æ–±–º–µ–Ω–∞
    """
    query = update.callback_query
    await query.answer()

    try:
        day_to_give = query.data.split("_")[-1]
        context.user_data['exchange_day_to_give'] = day_to_give

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∫—Ä–æ–º–µ —Ç–µ–∫—É—â–µ–≥–æ)
        user_manager = context.bot_data['user_manager']
        current_user = user_manager.get_user_info(query.from_user.id)
        all_users = user_manager.load_users()

        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –§–ò–û (–∏—Å–∫–ª—é—á–∞—è —Ç–µ–∫—É—â–µ–≥–æ)
        valid_users = [
            user for user in all_users
            if user.get('approved') and user.get('fio') and user['chat_id'] != current_user['chat_id']
        ]

        if not valid_users:
            await query.edit_message_text("‚ÑπÔ∏è –ù–µ—Ç –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ–±–º–µ–Ω–∞")
            return

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        keyboard = [
            [InlineKeyboardButton(user['fio'], callback_data=f"exchange_user_{user['chat_id']}")]
            for user in valid_users
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–µ–Ω—å: {day_to_give}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–±–º–µ–Ω–∞:",
            reply_markup=reply_markup
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_exchange_day_selection: {e}")
        await query.edit_message_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–Ω—è")

async def handle_exchange_user_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–±–º–µ–Ω–∞
    """
    query = update.callback_query
    await query.answer()

    try:
        target_user_id = int(query.data.split("_")[-1])
        context.user_data['exchange_target_user_id'] = target_user_id

        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
        schedule = load_schedule()
        user_manager = context.bot_data['user_manager']

        current_user = user_manager.get_user_info(query.from_user.id)
        target_user = user_manager.get_user_info(target_user_id)

        if not target_user or not target_user.get('fio'):
            await query.edit_message_text("‚ö†Ô∏è –í—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        target_fio = target_user['fio']

        # –ü–æ–ª—É—á–∞–µ–º –¥–Ω–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —É —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        target_days = []
        for day, names in schedule.items():
            if target_fio in names and current_user['fio'] not in names:
                target_days.append(day)

        if not target_days:
            await query.edit_message_text(f"‚ÑπÔ∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_fio} –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –æ–±–º–µ–Ω–∞ —Å–º–µ–Ω")
            return

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–Ω—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è
        keyboard = [
            [InlineKeyboardButton(day, callback_data=f"exchange_target_day_{day}")]
            for day in target_days
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            f"–í—ã —Ö–æ—Ç–∏—Ç–µ –æ–±–º–µ–Ω—è—Ç—å –¥–µ–Ω—å {context.user_data['exchange_day_to_give']} "
            f"—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {target_fio}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å:",
            reply_markup=reply_markup
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_exchange_user_selection: {e}")
        await query.edit_message_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

async def handle_exchange_target_day_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–Ω—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞
    """
    query = update.callback_query
    await query.answer()

    try:
        target_day = query.data.split("_")[-1]
        day_to_give = context.user_data['exchange_day_to_give']
        target_user_id = context.user_data['exchange_target_user_id']

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
        user_manager = context.bot_data['user_manager']
        current_user = user_manager.get_user_info(query.from_user.id)
        target_user = user_manager.get_user_info(target_user_id)

        if not current_user or not target_user:
            await query.edit_message_text("‚ö†Ô∏è –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞
        exchange_offer = {
            'from_user': query.from_user.id,
            'from_user_fio': current_user['fio'],
            'day_to_give': day_to_give,
            'to_user': target_user_id,
            'to_user_fio': target_user['fio'],
            'day_to_get': target_day,
            'status': 'pending'
        }

        save_exchange_offer(exchange_offer)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        # –ò–∑–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç callback_data
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_exchange_{query.from_user.id}_{day_to_give}_{target_day}"),
                InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_exchange_{query.from_user.id}")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await context.bot.send_message(
            chat_id=target_user_id,
            text=f"üîî –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞ —Å–º–µ–Ω–∞–º–∏:\n\n"
                 f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {current_user['fio']}\n"
                 f"–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç: –¥–µ–Ω—å {day_to_give}\n"
                 f"–í–∑–∞–º–µ–Ω —Ö–æ—á–µ—Ç –ø–æ–ª—É—á–∏—Ç—å: –¥–µ–Ω—å {target_day}\n\n"
                 f"–í—ã —Å–æ–≥–ª–∞—Å–Ω—ã –Ω–∞ –æ–±–º–µ–Ω?",
            reply_markup=reply_markup
        )

        await query.edit_message_text(
            f"‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user['fio']}\n\n"
            f"–í—ã –æ—Ç–¥–∞–µ—Ç–µ: –¥–µ–Ω—å {day_to_give}\n"
            f"–ü–æ–ª—É—á–∞–µ—Ç–µ: –¥–µ–Ω—å {target_day}"
        )

        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        context.user_data.pop('exchange_day_to_give', None)
        context.user_data.pop('exchange_target_user_id', None)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_exchange_target_day_selection: {e}")
        await query.edit_message_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è")

async def handle_exchange_response(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞ (–ø—Ä–∏–Ω—è—Ç—å/–æ—Ç–∫–ª–æ–Ω–∏—Ç—å)
    """
    query = update.callback_query
    await query.answer()

    try:
        # –†–∞–∑–±–∏—Ä–∞–µ–º callback_data
        data_parts = query.data.split("_")
        action = data_parts[0]  # "accept" –∏–ª–∏ "reject"

        user_manager = context.bot_data['user_manager']
        to_user = user_manager.get_user_info(query.from_user.id)

        if action == "accept":
            # –§–æ—Ä–º–∞—Ç: accept_exchange_<from_user_id>_<day_to_give>_<day_to_get>
            if len(data_parts) < 5:
                raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è")

            from_user_id = int(data_parts[2])
            day_to_give = data_parts[3]
            day_to_get = "_".join(data_parts[4:])

            # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞
            offer = find_exchange_offer(from_user_id, query.from_user.id)

            if not offer or offer['day_to_give'] != day_to_give or offer['day_to_get'] != day_to_get:
                await query.edit_message_text("‚ö†Ô∏è –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª–æ")
                return

            from_user = user_manager.get_user_info(from_user_id)

            if not from_user or not to_user:
                await query.edit_message_text("‚ö†Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–º–µ–Ω—ã –≤—Å–µ –µ—â–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã
            schedule = load_schedule()

            if (from_user['fio'] not in schedule.get(day_to_give, []) or
                    to_user['fio'] not in schedule.get(day_to_get, [])):
                await query.edit_message_text("‚ö†Ô∏è –û–¥–Ω–∞ –∏–∑ —Å–º–µ–Ω –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –æ–±–º–µ–Ω–∞")
                remove_exchange_offer(offer)
                return

            # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±–º–µ–Ω
            try:
                schedule[day_to_give].remove(from_user['fio'])
                schedule[day_to_give].append(to_user['fio'])

                schedule[day_to_get].remove(to_user['fio'])
                schedule[day_to_get].append(from_user['fio'])
            except ValueError as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–º–µ–Ω–µ —Å–º–µ–Ω–∞–º–∏: {e}")
                await query.edit_message_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–º–µ–Ω–µ —Å–º–µ–Ω–∞–º–∏")
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            save_schedule(schedule)

            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
            remove_exchange_offer(offer)

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            await query.edit_message_text("‚úÖ –í—ã –ø—Ä–∏–Ω—è–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞. –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")

            await context.bot.send_message(
                chat_id=from_user_id,
                text=f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {to_user['fio']} –ø—Ä–∏–Ω—è–ª –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞:\n\n"
                     f"–í—ã –æ—Ç–¥–∞–µ—Ç–µ: –¥–µ–Ω—å {day_to_give}\n"
                     f"–ü–æ–ª—É—á–∞–µ—Ç–µ: –¥–µ–Ω—å {day_to_get}\n\n"
                     f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!"
            )

        elif action == "reject":
            # –§–æ—Ä–º–∞—Ç: reject_exchange_<from_user_id>
            if len(data_parts) < 3:
                raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è")

            from_user_id = int(data_parts[2])
            offer = find_exchange_offer(from_user_id, query.from_user.id)

            if not offer:
                await query.edit_message_text("‚ö†Ô∏è –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª–æ")
                return

            from_user = user_manager.get_user_info(from_user_id)

            if not from_user or not to_user:
                await query.edit_message_text("‚ö†Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return

            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
            remove_exchange_offer(offer)
            await query.edit_message_text("‚ùå –í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞")

            await context.bot.send_message(
                chat_id=from_user_id,
                text=f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {to_user['fio']} –æ—Ç–∫–ª–æ–Ω–∏–ª –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞:\n\n"
                     f"–í—ã –ø—Ä–µ–¥–ª–∞–≥–∞–ª–∏: –¥–µ–Ω—å {offer['day_to_give']}\n"
                     f"–í–∑–∞–º–µ–Ω —Ö–æ—Ç–µ–ª–∏ –ø–æ–ª—É—á–∏—Ç—å: –¥–µ–Ω—å {offer['day_to_get']}"
            )
        else:
            await query.edit_message_text("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_exchange_response: {e}", exc_info=True)
        await query.edit_message_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞")