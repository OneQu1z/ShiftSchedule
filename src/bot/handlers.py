import pytz
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    CommandHandler,
    ContextTypes,
    CallbackQueryHandler,
    MessageHandler,
    filters
)
from datetime import time
import logging
from src.bot.utils import send_schedule_to_user
from src.core.storage import load_admins, load_notification_time, save_notification_time, load_shifts, save_shifts
from src.core.google_utils import GoogleSheetsManager
from src.bot.scheduler import auto_send_schedule
logger = logging.getLogger(__name__)
gs_manager = GoogleSheetsManager()

HELP_TEXT = """
üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

/start - –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
/schedule - –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
/help - –ü–æ–º–æ—â—å

–ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã:
/admin - –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
/clear_sheet - –û—á–∏—Å—Ç–∏—Ç—å Google-—Ç–∞–±–ª–∏—Ü—É
"""


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_manager = context.bot_data['user_manager']
        chat_id = update.effective_chat.id

        if user_manager.save_user(chat_id):
            await update.message.reply_text(f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n\n{HELP_TEXT}")
        else:
            await update.message.reply_text(f"‚ÑπÔ∏è –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.\n\n{HELP_TEXT}")

    except Exception as e:
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /start: {e}")


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(HELP_TEXT)


async def schedule(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        await send_schedule_to_user(update.effective_chat.id, context)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")


async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_chat.id):
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞!")
        return

    keyboard = [
        [InlineKeyboardButton("üïí –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="change_time")],
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ—Ç—ã", callback_data="add_slots")],
        [InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É", callback_data="clear_sheet")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=reply_markup)


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "change_time":
        await query.edit_message_text("‚è∞ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 21:30):")
        context.user_data['awaiting_time'] = True
    elif query.data == "add_slots":
        days = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
        keyboard = [[InlineKeyboardButton(day, callback_data=f"add_{i}")] for i, day in enumerate(days)]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ—Ç–∞:", reply_markup=reply_markup)
    elif query.data.startswith("add_"):
        day_idx = int(query.data.split("_")[1])
        shifts = load_shifts()
        day = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"][day_idx]
        shifts[day] += 1
        save_shifts(shifts)
        await query.edit_message_text(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Å–ª–æ—Ç –¥–ª—è {day}. –¢–µ–ø–µ—Ä—å: {shifts[day]}")
    elif query.data == "clear_sheet":
        try:
            if gs_manager.clear_responses():  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥
                await query.edit_message_text("‚úÖ Google-—Ç–∞–±–ª–∏—Ü–∞ –æ—á–∏—â–µ–Ω–∞")
            else:
                await query.edit_message_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ç–∞–±–ª–∏—Ü—ã")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ç–∞–±–ª–∏—Ü—ã: {e}")
            await query.edit_message_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ç–∞–±–ª–∏—Ü—ã")


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get('awaiting_time'):
        try:
            time_str = update.message.text
            hours, minutes = map(int, time_str.split(':'))
            if 0 <= hours < 24 and 0 <= minutes < 60:
                save_notification_time(hours, minutes, 3)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—Ä–µ–¥–∞
                context.user_data.pop('awaiting_time')
                await update.message.reply_text(f"‚úÖ –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {time_str}")

                # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É
                context.job_queue.stop()
                tz = pytz.timezone('Europe/Moscow')
                context.job_queue.run_daily(
                    auto_send_schedule,
                    time=time(hour=hours, minute=minutes, tzinfo=tz),
                    days=(3,)
                )
            else:
                await update.message.reply_text("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú")
        except ValueError:
            await update.message.reply_text("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú")


async def clear_sheet_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_chat.id):
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞!")
        return

    try:
        # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        manager = GoogleSheetsManager()
        if manager.clear_responses():
            await update.message.reply_text("‚úÖ –¢–∞–±–ª–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞!")
        else:
            await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}", exc_info=True)
        await update.message.reply_text(f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")


def is_admin(chat_id):
    admins = load_admins()
    return str(chat_id) in admins

